// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/abicky/ecsmec/internal/capacity (interfaces: Drainer,Poller)
//
// Generated by this command:
//
//	mockgen -package mocks -destination capacity.go github.com/abicky/ecsmec/internal/capacity Drainer,Poller
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqs "github.com/aws/aws-sdk-go/service/sqs"
	gomock "go.uber.org/mock/gomock"
)

// MockDrainer is a mock of Drainer interface.
type MockDrainer struct {
	ctrl     *gomock.Controller
	recorder *MockDrainerMockRecorder
}

// MockDrainerMockRecorder is the mock recorder for MockDrainer.
type MockDrainerMockRecorder struct {
	mock *MockDrainer
}

// NewMockDrainer creates a new mock instance.
func NewMockDrainer(ctrl *gomock.Controller) *MockDrainer {
	mock := &MockDrainer{ctrl: ctrl}
	mock.recorder = &MockDrainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrainer) EXPECT() *MockDrainerMockRecorder {
	return m.recorder
}

// Drain mocks base method.
func (m *MockDrainer) Drain(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drain", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drain indicates an expected call of Drain.
func (mr *MockDrainerMockRecorder) Drain(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drain", reflect.TypeOf((*MockDrainer)(nil).Drain), arg0)
}

// ProcessInterruptions mocks base method.
func (m *MockDrainer) ProcessInterruptions(arg0 []*sqs.Message) ([]*sqs.DeleteMessageBatchRequestEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessInterruptions", arg0)
	ret0, _ := ret[0].([]*sqs.DeleteMessageBatchRequestEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessInterruptions indicates an expected call of ProcessInterruptions.
func (mr *MockDrainerMockRecorder) ProcessInterruptions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessInterruptions", reflect.TypeOf((*MockDrainer)(nil).ProcessInterruptions), arg0)
}

// MockPoller is a mock of Poller interface.
type MockPoller struct {
	ctrl     *gomock.Controller
	recorder *MockPollerMockRecorder
}

// MockPollerMockRecorder is the mock recorder for MockPoller.
type MockPollerMockRecorder struct {
	mock *MockPoller
}

// NewMockPoller creates a new mock instance.
func NewMockPoller(ctrl *gomock.Controller) *MockPoller {
	mock := &MockPoller{ctrl: ctrl}
	mock.recorder = &MockPollerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoller) EXPECT() *MockPollerMockRecorder {
	return m.recorder
}

// Poll mocks base method.
func (m *MockPoller) Poll(arg0 context.Context, arg1 func([]*sqs.Message) ([]*sqs.DeleteMessageBatchRequestEntry, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Poll", arg0, arg1)
}

// Poll indicates an expected call of Poll.
func (mr *MockPollerMockRecorder) Poll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockPoller)(nil).Poll), arg0, arg1)
}

// PollOnce mocks base method.
func (m *MockPoller) PollOnce(arg0 func([]*sqs.Message) ([]*sqs.DeleteMessageBatchRequestEntry, error), arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollOnce", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PollOnce indicates an expected call of PollOnce.
func (mr *MockPollerMockRecorder) PollOnce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollOnce", reflect.TypeOf((*MockPoller)(nil).PollOnce), arg0, arg1)
}
